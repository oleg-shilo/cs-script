@page "/fullscreen-editor"
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>@(Path.GetFileName(File))</PageTitle>

<div class="fullscreen-editor-container">
    <div id="fullscreen-editor"></div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string File { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Line { get; set; } = "";
    int line => Line.ToInt();

    private IJSObjectReference? _module;
    private string _fileContent = "";
    private const string _theme = "darkone"; // Set your preferred theme

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(File))
        {
            try
            {
                _fileContent = System.IO.File.ReadAllText(File);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading file: {ex.Message}");
                _fileContent = "// Error loading file content";
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/fullscreenEditor.js");
            await _module.InvokeVoidAsync("initFullscreenEditor", "fullscreen-editor", _fileContent, _theme);

            if (line > 0)
            {
                // Add a small delay to ensure editor is fully initialized
                await Task.Delay(100);
                await _module.InvokeVoidAsync("scrollToLine", line - 1);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch { }
        }
    }
}